
class Solution {
    public static int intersectSize(int a[], int b[]) {
        // Your code here
        
           HashSet<Integer> set=new HashSet<>();
           
           for(int i:a)
           {
               set.add(i);
           }
           
           int count=0;
           for(int i:b)
           {
               if(set.contains(i))
               {
                   count++;
               }
           }
           return count;
    }
}

//1. Fast Lookup — O(1) vs O(n)
HashSet uses hashing, so contains() or add() operations are on average O(1) (constant time).

List (like ArrayList) requires scanning elements to check contains(), which is O(n) (linear time).

Example:

If you want to check if an element x is already present:

hashSet.contains(x) → fast (O(1))

list.contains(x) → slow (O(n))

//time complexity O(n1+n2)
//space O(n1)
